// Code generated by "stringer -type=LiteralKind,UnaryOpKind,BinaryOpKind,GenericDeclKind -output=kind_string.go -linecomment"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownLiteral-0]
	_ = x[IntLiteral-1]
	_ = x[FloatLiteral-2]
	_ = x[StringLiteral-3]
}

const _LiteralKind_name = "unknown literalintfloatstring"

var _LiteralKind_index = [...]uint8{0, 15, 18, 23, 29}

func (i LiteralKind) String() string {
	if i >= LiteralKind(len(_LiteralKind_index)-1) {
		return "LiteralKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LiteralKind_name[_LiteralKind_index[i]:_LiteralKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownUnaryOp-0]
	_ = x[UnaryNot-1]
	_ = x[UnaryNeg-2]
	_ = x[UnaryAddr-3]
	_ = x[UnaryMutAddr-4]
}

const _UnaryOpKind_name = "unknown unary operation!-&&var"

var _UnaryOpKind_index = [...]uint8{0, 23, 24, 25, 26, 30}

func (i UnaryOpKind) String() string {
	if i >= UnaryOpKind(len(_UnaryOpKind_index)-1) {
		return "UnaryOpKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _UnaryOpKind_name[_UnaryOpKind_index[i]:_UnaryOpKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownBinaryOp-0]
	_ = x[BinaryAdd-1]
	_ = x[BinarySub-2]
	_ = x[BinaryMult-3]
	_ = x[BinaryDiv-4]
	_ = x[BinaryMod-5]
	_ = x[BinaryAssign-6]
}

const _BinaryOpKind_name = "unknown binary operation+-*/%="

var _BinaryOpKind_index = [...]uint8{0, 24, 25, 26, 27, 28, 29, 30}

func (i BinaryOpKind) String() string {
	if i >= BinaryOpKind(len(_BinaryOpKind_index)-1) {
		return "BinaryOpKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BinaryOpKind_name[_BinaryOpKind_index[i]:_BinaryOpKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownGenericDeclKind-0]
	_ = x[ConstDecl-1]
	_ = x[VarDecl-2]
	_ = x[ValDecl-3]
}

const _GenericDeclKind_name = "unknown generic declaration kindconstvarval"

var _GenericDeclKind_index = [...]uint8{0, 32, 37, 40, 43}

func (i GenericDeclKind) String() string {
	if i >= GenericDeclKind(len(_GenericDeclKind_index)-1) {
		return "GenericDeclKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _GenericDeclKind_name[_GenericDeclKind_index[i]:_GenericDeclKind_index[i+1]]
}
