// Code generated by "stringer -type=LiteralKind,PrefixOpKind,InfixOpKind,PostfixOpKind,GenericDeclKind -output=kind_string.go -linecomment"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownLiteral-0]
	_ = x[IntLiteral-1]
	_ = x[FloatLiteral-2]
	_ = x[StringLiteral-3]
}

const _LiteralKind_name = "unknown literal kindintfloatstring"

var _LiteralKind_index = [...]uint8{0, 20, 23, 28, 34}

func (i LiteralKind) String() string {
	if i >= LiteralKind(len(_LiteralKind_index)-1) {
		return "LiteralKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LiteralKind_name[_LiteralKind_index[i]:_LiteralKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownPrefix-0]
	_ = x[PrefixNot-1]
	_ = x[PrefixNeg-2]
	_ = x[PrefixAddr-3]
	_ = x[PrefixMutAddr-4]
}

const _PrefixOpKind_name = "unknown prefix operation!-&&var"

var _PrefixOpKind_index = [...]uint8{0, 24, 25, 26, 27, 31}

func (i PrefixOpKind) String() string {
	if i >= PrefixOpKind(len(_PrefixOpKind_index)-1) {
		return "PrefixOpKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PrefixOpKind_name[_PrefixOpKind_index[i]:_PrefixOpKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownInfix-0]
	_ = x[InfixAdd-1]
	_ = x[InfixSub-2]
	_ = x[InfixMult-3]
	_ = x[InfixDiv-4]
	_ = x[InfixMod-5]
	_ = x[InfixAssign-6]
	_ = x[InfixEq-7]
	_ = x[InfixNe-8]
	_ = x[InfixLt-9]
	_ = x[InfixLe-10]
	_ = x[InfixGt-11]
	_ = x[InfixGe-12]
}

const _InfixOpKind_name = "unknown infix operation+-*/%===!=<<=>>="

var _InfixOpKind_index = [...]uint8{0, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 36, 37, 39}

func (i InfixOpKind) String() string {
	if i >= InfixOpKind(len(_InfixOpKind_index)-1) {
		return "InfixOpKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _InfixOpKind_name[_InfixOpKind_index[i]:_InfixOpKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownPostfix-0]
	_ = x[PostfixTry-1]
	_ = x[PostfixUnwrap-2]
}

const _PostfixOpKind_name = "unknown postfix operation?!"

var _PostfixOpKind_index = [...]uint8{0, 25, 26, 27}

func (i PostfixOpKind) String() string {
	if i >= PostfixOpKind(len(_PostfixOpKind_index)-1) {
		return "PostfixOpKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PostfixOpKind_name[_PostfixOpKind_index[i]:_PostfixOpKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownDecl-0]
	_ = x[ConstDecl-1]
	_ = x[VarDecl-2]
	_ = x[ValDecl-3]
}

const _GenericDeclKind_name = "unknown generic declaration kindconstvarval"

var _GenericDeclKind_index = [...]uint8{0, 32, 37, 40, 43}

func (i GenericDeclKind) String() string {
	if i >= GenericDeclKind(len(_GenericDeclKind_index)-1) {
		return "GenericDeclKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _GenericDeclKind_name[_GenericDeclKind_index[i]:_GenericDeclKind_index[i+1]]
}
