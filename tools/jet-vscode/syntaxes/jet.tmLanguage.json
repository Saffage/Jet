{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Jet",
	"scopeName": "source.jet",
	"patterns": [
		{ "include": "#illegal-indent" },
		{ "include": "#comments" },
		{ "include": "#keywords" },
		{ "include": "#attributes" },
		{ "include": "#annotations" },
		{ "include": "#builtins" },
		{ "include": "#char-lit" },
		{ "include": "#string-lit" },
		{ "include": "#number-lit" },
		{ "include": "#fn-call" },
		{ "include": "#brackets" },
		{ "include": "#colors" }
	],
	"repository": {
		"illegal-indent": {
			"patterns": [
				{
					"name": "invalid.illegal.indent.jet",
					"match": "\\t"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.documentation",
					"contentName": "comment.block.documentation.content.jet",
					"begin": "##(?=\\s)",
					"end": "(?=$)"
				},
				{
					"name": "comment.block.documentation.module.jet",
					"contentName": "comment.block.documentation.module.content.jet",
					"begin": "#!(?=\\s)",
					"end": "(?=$)"
				},
				{
					"name": "comment.line",
					"contentName": "comment.line.content.jet",
					"begin": "#",
					"end": "(?=$)"
				}
			]
		},
		"attributes": {
			"patterns": [
				{
					"begin": "\\[(?=\\s*\\<)",
					"beginCaptures": {
						"0": { "name": "entity.other.attribute.jet" }
					},
					"end": "\\]",
					"endCaptures": {
						"0": { "name": "entity.other.attribute.jet" }
					},
					"patterns": [
						{
							"begin": "\\<",
							"beginCaptures": {
								"0": { "name": "entity.other.attribute.jet" }
							},
							"end": "\\>",
							"endCaptures": {
								"0": { "name": "entity.other.attribute.jet" }
							},
							"patterns": [
								{
									"match": "\\b([A-Za-z_][A-Za-z_0-9]*)\\b",
									"captures": {
										"1": { "name": "entity.other.attribute-name.jet" }
									}
								},
								{ "include": "$self" }
							]
						}
					]
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"match": "\\@([A-Za-z_][A-Za-z_0-9]*)",
					"captures": {
						"0": { "name": "support.other.annotation.jet" },
						"1": { "name": "support.other.annotation-name.jet" }
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.operator.word-like.jet",
					"match": "\\b(not|or|and|is|as|in|of)\\b"
				},
				{
					"name": "keyword.control.jet",
					"match": "\\b(if|elif|else|when|while|for|continue|break|return)\\b"
				},
				{
					"name": "keyword.jet",
					"match": "\\b(module|using|func|type|struct|enum|var|val|const|do|self)\\b"
				}
			]
		},
		"builtin-types": {
			"patterns": [
				{
					"comment": "Primitive types",
					"name": "storage.type.builtin.primitive.jet",
					"match": "\\b([ui](8|16|32|64|size)|f(32|64)|char|rune|bool|any)\\b"
				},
				{
					"comment": "Backend types",
					"name": "storage.type.builtin.c.jet",
					"match": "\\b(cshort|cint|clong|clonglong|cushort|cuint|culong|culonglong|cfloat|cdouble|clongdouble|cchar|cuchar)\\b"
				},
				{
					"name": "storage.type.builtin.std.jet",
					"match": "\\b(string|seq|table)\\b"
				}
			]
		},
		"builtins": {
			"patterns": [
				{ "include": "#builtin-types" },
				{
					"name": "constant.language.boolean.jet",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.language.nil.jet",
					"match": "\\b(nil)\\b"
				},
				{
					"name": "constant.language.none.jet",
					"match": "\\b(none)\\b"
				},
				{
					"name": "support.function.builtin.jet",
					"match": "(\\$)\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b",
					"captures": {
						"1": { "name": "support.function.builtin.prefix.jet" }
					}
				},
				{
					"name": "keyword.operator.colon-colon.jet",
					"match": "\\:\\:"
				},
				{
					"name": "keyword.operator.colon.jet",
					"match": "\\:"
				},
				{
					"name": "keyword.operator.dot.jet",
					"match": "\\."
				},
				{
					"name": "keyword.operator.comma.jet",
					"match": "\\,"
				},
				{
					"name": "keyword.operator.underscore.jet",
					"match": "\\b\\_\\b"
				},
				{
					"comment": "Operators",
					"name": "keyword.operator.jet",
					"match": "(\\~|\\!|\\?|\\>|\\<|\\=|\\+|\\-|\\*|\\/|\\%|\\&|\\$|\\^|\\@|\\|)"
				}
			]
		},
		"fn-call": {
			"patterns": [
				{
					"match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b(\\[.*\\])?(?=\\s*\\()",
					"captures": {
						"1": { "name": "entity.name.function.jet" },
						"2": {
							"patterns": [
								{ "include": "source.jet" }
							]
						}
					}
				}
			]
		},
		"string-lit": {
			"patterns": [
				{
					"name": "string.quoted.single.jet",
					"begin": "'",
					"end": "'",
					"patterns": [
						{ "include": "#string-fmt" },
						{ "include": "#char-escape" }
					]
				},
				{
					"name": "string.quoted.double.jet",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{ "include": "#string-fmt" }
					]
				}
			]
		},
		"number-lit": {
			"patterns": [
				{
					"name": "constant.numeric.float.jet",
					"match": "(-)?\\b[0-9][_0-9]*((\\.[0-9][_0-9]*)?(([eE][+-]?)[0-9][_0-9]*)?)\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"5": { "name": "keyword.operator.jet" }
					}
				},
				{
					"name": "constant.numeric.hexadecimal.jet",
					"match": "(-)?\\b(0x)[0-9a-fA-F][_0-9a-fA-F]*\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"2": { "name": "constant.numeric.prefix.jet" }
					}
				},
				{
					"name": "constant.numeric.octal.jet",
					"match": "(-)?\\b(0o)[0-7][_0-7]*\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"2": { "name": "constant.numeric.prefix.jet" }
					}
				},
				{
					"name": "constant.numeric.binary.jet",
					"match": "(-)?\\b(0b)[01][_01]*\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"2": { "name": "constant.numeric.prefix.jet" }
					}
				},
				{
					"name": "constant.numeric.decimal.jet",
					"match": "(-)?\\b[0-9][_0-9]*\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" }
					}
				}
			]
		},
		"char-escape": {
			"patterns": [
				{
					"name": "constant.character.escape.jet",
					"match": "\\\\([0-9]{3}|[nrt'\\\"\\\\]|x\\h{2}|x\\{\\h+\\}|u\\h{4}|U\\h{8})"
				},
				{
					"name": "invalid.escape.jet",
					"match": "\\\\."
				}
			]
		},
		"string-fmt": {
			"patterns": [
				{
					"name": "meta.template.expression.jet",
					"begin": "\\$\\{",
					"beginCaptures": {
						"0": { "name": "string.interpolated.jet" }
					},
					"end": "\\}",
					"endCaptures": {
						"0": { "name": "string.interpolated.jet" }
					},
					"patterns": [
						{
							"name": "meta.template.format-specifier.jet",
							"begin": ":",
							"end": "(?=\\})",
							"patterns": [
								{
									"name": "invalid.illegal.format-specifier.jet",
									"match": "[^._0-9a-zA-Z\\-\\+<>=!?]"
								}
							]
						},
						{ "include": "source.jet" }
					]
				},
				{
					"name": "meta.template.expression.jet",
					"match": "(\\$)([a-zA-Z_][0-9a-zA-Z_]*)",
					"captures": {
						"1": { "name": "string.interpolated.jet" },
						"2": {
							"patterns": [
								{ "include": "source.jet" }
							]
						}
					}
				},
				{
					"name": "constant.character.escape.jet",
					"match": "\\$\\$"
				},
				{
					"name": "invalid.illegal.string.interpolation.jet",
					"match": "\\$."
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"comment": "Builtin function call brackets has distinct color",
					"begin": "(?<=\\$\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b)\\(",
					"beginCaptures": {
						"0": { "name": "support.function.builtin.brackets.jet" }
					},
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "support.function.builtin.brackets.jet" }
					},
					"patterns": [
						{ "include": "source.jet" }
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": { "name": "punctuation.brackets.round.jet" }
					},
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.brackets.round.jet" }
					},
					"patterns": [
						{ "include": "source.jet" }
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": { "name": "punctuation.brackets.curly.jet" }
					},
					"end": "\\}",
					"endCaptures": {
						"0": { "name": "punctuation.brackets.curly.jet" }
					},
					"patterns": [
						{ "include": "source.jet" }
					]
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": { "name": "punctuation.brackets.square.jet" }
					},
					"end": "\\]",
					"endCaptures": {
						"0": { "name": "punctuation.brackets.square.jet" }
					},
					"patterns": [
						{ "include": "source.jet" }
					]
				}
			]
		},
		"colors": {
			"patterns": [
				{
					"name": "Modules",
					"match": "(?<=\\b(?:module|using)\\b\\s*)\\b([A-Z][_a-zA-Z0-9]*)\\b",
					"captures": {
						"1": { "name": "entity.name.namespace.jet" }
					}
				},
				{
					"name": "Modules",
					"match": "\\b([A-Z][_a-zA-Z0-9]*)\\b(?=\\s*\\.\\s*[^.])",
					"captures": {
						"1": { "name": "entity.name.namespace.jet" }
					}
				},
				{
					"name": "Fields",
					"match": "(?<=\\b[_a-z][_a-zA-Z0-9]*\\s*\\.\\s*)\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b",
					"captures": {
						"1": { "name": "variable.other.property.jet" }
					}
				},
				{
					"name": "Types",
					"match": "\\b([A-Z][_a-zA-Z0-9]*)\\b",
					"captures": {
						"1": { "name": "entity.name.class.jet" }
					}
				}
			]
		}
	}
}
