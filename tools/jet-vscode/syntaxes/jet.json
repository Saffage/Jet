{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Jet",
	"scopeName": "source.jet",
	"patterns": [
		{ "include": "#illegal-indent" },
		{ "include": "#comments" },
		{ "include": "#annotation" },
		{ "include": "#keywords" },
		{ "include": "#builtins" },
		{ "include": "#char-lit" },
		{ "include": "#string-lit" },
		{ "include": "#number-lit" },
		{ "include": "#fn-call" },
		{ "include": "#generic-identifier" },
		{ "include": "#type-identifier" },
		{ "include": "#brackets" }
	],
	"repository": {
		"illegal-indent": {
			"patterns": [
				{
					"name": "invalid.illegal.indent.jet",
					"match": "\\t"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.documentation",
					"contentName": "comment.block.documentation.content.jet",
					"begin": "##",
					"end": "$"
				},
				{
					"name": "comment.block.documentation.module.jet",
					"contentName": "comment.block.documentation.module.content.jet",
					"begin": "#!",
					"end": "$"
				},
				{
					"name": "comment.line",
					"contentName": "comment.line.content.jet",
					"begin": "#",
					"end": "$"
				}
			]
		},
		"annotation": {
			"patterns": [
				{
					"begin": "(\\@)\\[",
					"beginCaptures": {
						"0": { "name": "meta.annotation.brackets.jet" },
						"1": { "name": "meta.annotation.prefix.jet" }
					},
					"end": "\\]",
					"endCaptures": {
						"0": { "name": "meta.annotation.brackets.jet" }
					},
					"patterns": [
						{
							"comment": "Pragma parameters",
							"begin": "\\(",
							"beginCaptures": {
								"0": { "name": "punctuation.brackets.round.jet" }
							},
							"end": "\\)",
							"endCaptures": {
								"0": { "name": "punctuation.brackets.round.jet" }
							},
							"patterns": [
								{ "include": "source.jet" }
							]
						},
						{
							"match": "\\b([A-Za-z_][A-Za-z_0-9]*)\\b",
							"captures": {
								"1": { "name": "meta.annotation.jet" }
							}
						},
						{
							"match": ",",
							"name": "meta.annotation.separator.jet"
						},
						{
							"match": ".",
							"name": "invalid.illegal.annotation.jet"
						}
					]
				},
				{
					"match": "(\\@)[A-Za-z_][A-Za-z_0-9]*",
					"captures": {
						"0": { "name": "meta.annotation.jet" },
						"1": { "name": "meta.annotation.prefix.jet" }
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.operator.wordlike.jet",
					"match": "\\b(not|or|and|is|as|in|of)\\b"
				},
				{
					"name": "keyword.control.jet",
					"match": "\\b(if|elif|else|match|when|while|loop|for|continue|break|return)\\b"
				},
				{
					"name": "keyword.jet",
					"match": "\\b(module|use|func|type|var|val|do|impl)\\b"
				},
				{
					"comment": "Reserved keywords",
					"name": "invalid.illegal.keyword.jet",
					"match": "\\b(signal|trait|dynamic)\\b"
				}
			]
		},
		"builtin-types": {
			"patterns": [
				{
					"comment": "Primitive types",
					"name": "storage.type.primitive.jet",
					"match": "\\b(unit|bool|[ui](8|16|32|64|size)|f(32|64))\\b"
				},
				{
					"comment": "Backend types",
					"name": "storage.type.primitive.special.jet",
					"match": "\\b(cshort|cint|clong|clonglong|cushort|cuint|culong|culonglong|cfloat|cdouble|clongdouble|csize)\\b"
				},
				{
					"comment": "Type aliases",
					"name": "storage.type.primitive.jet",
					"match": "\\b(char|string)\\b"
				},
				{
					"comment": "Reserved",
					"name": "storage.modifier.jet",
					"match": "\\b(ref|out)\\b"
				}
			]
		},
		"builtins": {
			"patterns": [
				{ "include": "#builtin-types" },
				{
					"name": "constant.language.jet",
					"match": "\\b(true|false|nil|undefined)\\b"
				},
				{
					"name": "support.function.builtin.jet",
					"match": "\\b(print|println|panic)\\b"
				},
				{
					"name": "keyword.operator.colon-colon.jet",
					"match": "\\:\\:"
				},
				{
					"name": "keyword.operator.colon.jet",
					"match": "\\:"
				},
				{
					"name": "keyword.operator.dot.jet",
					"match": "\\."
				},
				{
					"name": "keyword.operator.underscore.jet",
					"match": "\\b\\_\\b"
				},
				{
					"comment": "Operators",
					"name": "keyword.operator.jet",
					"match": "(\\!|\\?|\\>|\\<|\\=|\\+|\\-|\\*|\\/|\\%|\\&|\\$|\\^|\\@|\\|)"
				}
			]
		},
		"fn-call": {
			"patterns": [
				{
					"match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b(?=\\()",
					"captures": {
						"1": { "name": "entity.name.function.jet" }
					}
				}
			]
		},
		"generic-identifier": {
			"patterns": [
				{
					"match": "(?<!\\`)\\`[a-zA-Z_0-9]+\\b",
					"name": "meta.template.jet"
				}
			]
		},
		"type-identifier": {
			"patterns": [
				{
					"match": "\\b([A-Z][A-Za-z_0-9]*)\\b(\\?)?",
					"captures": {
						"1": { "name": "entity.name.type.jet" },
						"2": { "name": "keyword.operator.jet" }
					}
				}
			]
		},
		"string-lit": {
			"patterns": [
				{
					"name": "string.quoted.double.jet",
					"begin": "(?<=\\$)\"\"\"",
					"end": "\"\"\"(?!\")",
					"patterns": [
						{ "include": "#string-fmt" },
						{ "include": "#string-esc" }
					]
				},
				{
					"name": "string.quoted.double.jet",
					"begin": "(?<=\\$)\"",
					"end": "\"|$",
					"patterns": [
						{ "include": "#string-fmt" },
						{ "include": "#string-esc" }
					]
				},
				{
					"name": "string.quoted.double.jet",
					"begin": "(?<=\\$)(r|R)\"\"\"",
					"beginCaptures": {
						"1": { "name": "string.raw.jet" }
					},
					"end": "\"\"\"(?!\")",
					"patterns": [
						{ "include": "#string-fmt" }
					]
				},
				{
					"name": "string.quoted.double.jet",
					"begin": "(?<=\\$)(r|R)\"",
					"beginCaptures": {
						"1": { "name": "string.raw.jet" }
					},
					"end": "\"|$",
					"patterns": [
						{ "include": "#string-fmt" }
					]
				},
				{
					"name": "string.quoted.triple.jet",
					"begin": "(r|R)\"\"\"",
					"beginCaptures": {
						"1": { "name": "string.raw.jet" }
					},
					"end": "\"\"\"(?!\")"
				},
				{
					"name": "string.quoted.triple.jet",
					"begin": "\"\"\"",
					"end": "\"\"\"(?!\")",
					"patterns": [
						{ "include": "#string-esc" }
					]
				},
				{
					"name": "string.quoted.double.jet",
					"begin": "(r|R)\"",
					"beginCaptures": {
						"1": { "name": "string.raw.jet" }
					},
					"end": "\"(?!\")|$"
				},
				{
					"name": "string.quoted.double.jet",
					"begin": "\"",
					"end": "\"|$",
					"patterns": [
						{ "include": "#string-esc" }
					]
				}
			]
		},
		"char-lit": {
			"patterns": [
				{
					"name": "string.quoted.single.jet",
					"begin": "\\'",
					"end": "\\'|$",
					"patterns": [
						{ "include": "#char-esc" },
						{
							"match": "\\\\."
						}
					]
				}
			]
		},
		"number-lit": {
			"patterns": [
				{
					"name": "constant.numeric.float.jet",
					"match": "(-)?\\b[0-9][_0-9]*((\\.[0-9][_0-9]*)?([eE][+-]?[0-9][_0-9]*)?)([a-zA-Z]\\w*)?\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"4": { "name": "keyword.operator.jet" },
						"5": { "name": "constant.numeric.suffix.jet" }
					}
				},
				{
					"name": "constant.numeric.hexadecimal.jet",
					"match": "(-)?\\b(0[xX])[0-9a-fA-F][_0-9a-fA-F]*([a-zA-Z]\\w*)?\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"2": { "name": "constant.numeric.prefix.jet" },
						"3": { "name": "constant.numeric.suffix.jet" }
					}
				},
				{
					"name": "constant.numeric.octal.jet",
					"match": "(-)?\\b(0o|(0O))[0-7][_0-7]*([a-zA-Z]\\w*)?\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"2": { "name": "constant.numeric.prefix.jet" },
						"3": { "name": "invalid.illegal.numeric.prefix.jet" },
						"4": { "name": "constant.numeric.suffix.jet" }
					}
				},
				{
					"name": "constant.numeric.binary.jet",
					"match": "(-)?\\b(0[bB])[01][_01]*([a-zA-Z]\\w*)?\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"2": { "name": "constant.numeric.prefix.jet" },
						"3": { "name": "constant.numeric.suffix.jet" }
					}
				},
				{
					"name": "constant.numeric.decimal.jet",
					"match": "(-)?\\b[0-9][_0-9]*([a-zA-Z]\\w*)?\\b",
					"captures": {
						"1": { "name": "keyword.operator.jet" },
						"2": { "name": "constant.numeric.suffix.jet" }
					}
				}
			]
		},
		"char-esc": {
			"patterns": [
				{
					"name": "constant.character.escape.jet",
					"match": "\\\\[0nrtvbf\\\\\\'\\\"]"
				},
				{
					"name": "constant.character.escape.jet",
					"match": "\\\\x\\h\\h"
				},
				{
					"name": "invalid.escape.jet",
					"match": "\\\\."
				}
			]
		},
		"string-esc": {
			"patterns": [
				{
					"name": "constant.character.escape.jet",
					"match": "\\\\u[0-9a-fA-F]{4}"
				},
				{
					"name": "constant.character.escape.jet",
					"match": "\\\\u\\[[0-9a-fA-F]{1,4}\\]"
				},
				{ "include": "#char-esc" }
			]
		},
		"string-fmt": {
			"patterns": [
				{
					"name": "constant.character.escape.jet",
					"match": "\\}\\}|\\{\\{"
				},
				{
					"name": "meta.template.expression.jet",
					"begin": "\\{",
					"beginCaptures": {
						"0": { "name": "string.interpolated.jet" }
					},
					"end": "\\}",
					"endCaptures": {
						"0": { "name": "string.interpolated.jet" }
					},
					"patterns": [
						{
							"name": "meta.template.format-specifier.jet",
							"begin": ":",
							"end": "(?=\\})"
						},
						{ "include": "source.jet" }
					]
				},
				{
					"name": "invalid.illegal.escape.jet",
					"match": "\\{|\\}"
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": { "name": "punctuation.brackets.round.jet" }
					},
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.brackets.round.jet" }
					},
					"patterns": [
						{ "include": "source.jet" }
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": { "name": "punctuation.brackets.curly.jet" }
					},
					"end": "\\}",
					"endCaptures": {
						"0": { "name": "punctuation.brackets.curly.jet" }
					},
					"patterns": [
						{ "include": "source.jet" }
					]
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": { "name": "punctuation.brackets.square.jet" }
					},
					"end": "\\]",
					"endCaptures": {
						"0": { "name": "punctuation.brackets.square.jet" }
					},
					"patterns": [
						{ "include": "source.jet" }
					]
				}
			]
		}
	}
}
