package cgen

import (
	"bufio"
	"io"
	"strings"

	"github.com/elliotchance/orderedmap/v2"
	"github.com/saffage/jet/ast"
	"github.com/saffage/jet/checker"
)

type generator struct {
	*checker.Module

	dataSect     strings.Builder
	typeSect     strings.Builder
	declVarsSect strings.Builder
	declFnsSect  strings.Builder
	codeSect     strings.Builder
	out          *bufio.Writer
	errors       []error
	numIndent    int
}

func (gen *generator) defs(
	defs *orderedmap.OrderedMap[*ast.Ident, checker.Symbol],
	owner *checker.Scope,
	declOnly bool,
) (mainFunc *checker.Func) {
	for def := defs.Front(); def != nil; def = def.Next() {
		def := def.Value
		_, isImportedModule := def.(*checker.Module)

		if def.Owner() != owner && !isImportedModule {
			continue
		}

		switch sym := def.(type) {
		case *checker.Var:
			gen.varDecl(sym)

		case *checker.Const:
			gen.constDecl(sym)

		case *checker.Struct:
			gen.structDecl(sym)

		case *checker.Enum:
			gen.enumDecl(sym)

		case *checker.Func:
			if sym.Name() == "main" && mainFunc == nil {
				mainFunc = sym
			} else {
				gen.funcDecl(sym)
			}

		case *checker.Module:
			gen.defs(sym.Defs, sym.Scope, true)

		default:
			panic("not implemented")
		}
	}

	return mainFunc
}

func (gen *generator) indent(w io.StringWriter) {
	if gen.numIndent > 0 {
		_, err := w.WriteString(strings.Repeat("\t", gen.numIndent))
		if err != nil {
			panic(err)
		}
	}
}

const prelude = `/* GENERATED BY JET COMPILER */

#undef NDEBUG
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>

typedef int8_t   Ti8;
typedef int16_t  Ti16;
typedef int32_t  Ti32;
typedef int64_t  Ti64;
typedef uint8_t  Tu8;
typedef uint16_t Tu16;
typedef uint32_t Tu32;
typedef uint64_t Tu64;
typedef float    Tf32;
typedef double   Tf64;
typedef uint8_t  Tbool;
`

const fnMainHead = "\nint main(const int argc, const char *const *const argv)"
