# Compilation for Windows utilizing MinGW64:
#   $ jet c -run -lib "lib" -ldflags "-lraylib -lgdi32 -lwinmm" "./examples/tetris.jet"

Color :: struct {
    r: u8
    g: u8
    b: u8
    a: u8
}

Rectangle :: struct {
    x:      f32
    y:      f32
    width:  f32
    height: f32
}

GRAY       := Color(r = 130, g = 130, b = 130, a = 255)
LINE_COLOR := Color(r = 200, g = 200, b = 200, a = 255)

@[extern_c("InitWindow")]
init_window: (width: int, height: int, title: *char) -> ()

@[extern_c("CloseWindow")]
close_window: () -> ()

@[extern_c("BeginDrawing")]
begin_drawing: () -> ()

@[extern_c("EndDrawing")]
end_drawing: () -> ()

@[extern_c("WindowShouldClose")]
window_should_close: () -> bool

@[extern_c("ClearBackground")]
clear_background: (color: Color) -> ()

@[extern_c("SetTargetFPS")]
set_target_fps: (fps: int) -> ()

@[extern_c("DrawLine")]
draw_line: (start_pos_x: int, start_pos_y: int, end_pos_x: int, end_pos_y: int, color: Color) -> ()

@[extern_c("DrawText")]
draw_text: (text: *char, pos_x: int, pos_y: int, font_size: int, color: Color) -> bool

@[extern_c("DrawRectangleRec")]
draw_rectangle_rec: (rec: Rectangle, color: Color) -> ()

@[extern_c("GetTime")]
get_time: () -> f64

@[extern_c("MeasureText")]
measure_text: (text: *char, font_size: int) -> int

@[extern_c("IsKeyPressed")]
is_key_pressed: (key: int) -> bool


KEY_SPACE :: 32
KEY_W     :: 87
KEY_A     :: 65
KEY_S     :: 83
KEY_D     :: 68
KEY_R     :: 82
KEY_DOWN  :: 264
KEY_UP    :: 265
KEY_LEFT  :: 263
KEY_RIGHT :: 262


@[extern_c("malloc")]
alloc: (size: u64) -> pointer

@[extern_c("free")]
free: (p: pointer) -> ()

@[extern_c("rand")]
rand_int: () -> int

@[extern_c]
sprintf: (stream: *char, @[const_c] format: *char, args: ...) -> int

CELL_SIZE             :: 30
PLAYFIELD_HIDDEN_ROWS :: 40
PLAYFIELD_ROWS        :: 20
PLAYFIELD_COLS        :: 10
PADDING_X             :: 12
PADDING_Y             :: 22
HEADER_HEIGHT         :: 60

SCREEN_WIDTH  :: CELL_SIZE * PLAYFIELD_COLS + 2 * PADDING_X
SCREEN_HEIGHT :: CELL_SIZE * PLAYFIELD_ROWS + 2 * PADDING_Y + HEADER_HEIGHT

NUM_TETRAMINOES    :: 7
AUTO_DROP_DURATION :: 0.5

Cell_State :: enum {
    Empty
    Cyan
    Blue
    Red
    Orange
    Yellow
    Green
    Purple
}

Game_State :: enum {
    Paused
    Playing
}

Action :: enum {
    Auto_Drop
    Drop
    Hard_Drop
    Left
    None
    Right
    Rotate
    Restart
}

Tetramino :: struct {
    rotations: [4]u32
    color:     Color
    index:     u8
}

Tetramino_Instance :: struct {
    tetramino: Tetramino
    rotation:  int
    x:         int
    y:         int
}

Timer :: struct {
    last_tick: f64
    duration:  f64
}

Shuffler :: struct {
    index: u8
    order: [NUM_TETRAMINOES]u8
}

Game :: struct {
    current_tetramino: *Tetramino_Instance
    score:             u64
    state:             Game_State
    auto_drop_timer:   Timer
    shuffler:          Shuffler
}

# Globals

CYAN_COLOR   := Color(r = 0x06, g = 0xB6, b = 0xD4, a = 0xFF)
BLUE_COLOR   := Color(r = 0x25, g = 0x63, b = 0xEB, a = 0xFF)
ORANGE_COLOR := Color(r = 0xEA, g = 0x58, b = 0x0C, a = 0xFF)
YELLOW_COLOR := Color(r = 0xFA, g = 0xCC, b = 0x15, a = 0xFF)
GREEN_COLOR  := Color(r = 0x22, g = 0xC5, b = 0x5E, a = 0xFF)
PURPLE_COLOR := Color(r = 0x93, g = 0x33, b = 0xEA, a = 0xFF)
RED_COLOR    := Color(r = 0xDC, g = 0x26, b = 0x26, a = 0xFF)

tetramino_colors: [NUM_TETRAMINOES]Color = [
    CYAN_COLOR,
    BLUE_COLOR,
    RED_COLOR,
    ORANGE_COLOR,
    YELLOW_COLOR,
    GREEN_COLOR,
    PURPLE_COLOR,
]

playfield: [PLAYFIELD_HIDDEN_ROWS][PLAYFIELD_COLS]Cell_State

tetraminoes: [NUM_TETRAMINOES]Tetramino = [
    Tetramino(
        rotations = [0x0F00, 0x2222, 0x00F0, 0x4444],
        color = CYAN_COLOR,
        index = 0,
    ),
    Tetramino(
        rotations = [0x0660, 0x0660, 0x0660, 0x0660],
        color = YELLOW_COLOR,
        index = 4,
    ),
    Tetramino(
        rotations = [0x0E40, 0x4C40, 0x4E00, 0x4640],
        color = PURPLE_COLOR,
        index = 6,
    ),
    Tetramino(
        rotations = [0x06C0, 0x8C40, 0x06C0, 0x8C40],
        color = GREEN_COLOR,
        index = 5,
    ),
    Tetramino(
        rotations = [0x0C60, 0x4C80, 0x0C60, 0x4C80],
        color = RED_COLOR,
        index = 2,
    ),
    Tetramino(
        rotations = [0x44C0, 0x8E00, 0x6440, 0x0E20],
        color = BLUE_COLOR,
        index = 1,
    ),
    Tetramino(
        rotations = [0x4460, 0x0E80, 0xC440, 0x2E00],
        color = ORANGE_COLOR,
        index = 3,
    ),
]

shuffle :: (shuffler: *Shuffler) {
    for i in 0..<NUM_TETRAMINOES {
        shuffler.*.order[i] = i as u8
    }
    for i in 0..<NUM_TETRAMINOES {
        num := rand_int() % NUM_TETRAMINOES
        j := num as u8
        temp := shuffler.*.order[i]

        shuffler.*.order[i] = shuffler.*.order[j]
        shuffler.*.order[j] = temp
    }
}

next_tetramino :: (tetramino: *Tetramino_Instance, shuffler: *Shuffler) {
    $assert(shuffler != 0 as *Shuffler)
    if shuffler.*.index == NUM_TETRAMINOES {
        shuffle(shuffler)
        shuffler.*.index = 0
    }

    $assert(tetramino != 0 as *Tetramino_Instance)
    tetramino.*.rotation  = 0
    tetramino.*.x         = 3
    tetramino.*.y         = 20
    tetramino.*.tetramino = tetraminoes[shuffler.*.order[shuffler.*.index]]
    shuffler.*.index     += 1
}

init_timer :: (duration: f64) -> Timer {
    Timer(
        last_tick = get_time(),
        duration  = duration,
    )
}

init_playfield :: () {
    for i in 0 ..< PLAYFIELD_HIDDEN_ROWS {
        for j in 0 ..< PLAYFIELD_COLS {
            playfield[i][j] = Cell_State.Empty
        }
    }
}

init_game :: () -> Game {
    game := Game(
        current_tetramino = alloc($size_of(Tetramino_Instance)) as *Tetramino_Instance,
        score = 0,
        state = Game_State.Paused,
        auto_drop_timer = init_timer(AUTO_DROP_DURATION),
        shuffler = Shuffler(
            index = 0,
            order = [0, 0, 0, 0, 0, 0, 0],
        ),
    )

    shuffle(&game.shuffler)
    next_tetramino(game.current_tetramino, &game.shuffler)
    init_playfield()
    game
}

deinit_game :: (game: *Game) {
    free(game.*.current_tetramino)
    game.*.current_tetramino = 0 as *Tetramino_Instance
}

timer_has_elapsed :: (timer: *Timer) -> bool {
    now := get_time()

    if now - timer.*.last_tick >= timer.*.duration {
        timer.*.last_tick = now
        true
    } else {
        false
    }
}

render_score :: (score: u64) {
    buf: [32]char
    format := "Score: %llu"
    sprintf(&buf[0], $as_ptr(format), score)
    text_width := measure_text(&buf[0], 24)
    x := { SCREEN_WIDTH - text_width } / 2
    y := PADDING_Y
    draw_text(&buf[0], x, y, 24, GRAY)
    ;
}

render_cell :: (x: int, y: int, color: Color) {
    $assert(x >= 0 and x < PLAYFIELD_COLS)
    $assert(y >= 0 and y < PLAYFIELD_ROWS)
    cell_x := PADDING_X + x * CELL_SIZE
    cell_y := SCREEN_HEIGHT - PADDING_Y - { y + 1 } * CELL_SIZE
    cell   := Rectangle(
        x      = cell_x as f32 + 0.5,
        y      = cell_y as f32 + 0.5,
        width  = CELL_SIZE as f32 - 0.5,
        height = CELL_SIZE as f32 - 0.5,
    )
    draw_rectangle_rec(cell, color)
}

render_grid :: () {
    for i in 0..PLAYFIELD_ROWS {
        y := SCREEN_HEIGHT - PADDING_Y - i*CELL_SIZE
        draw_line(PADDING_X, y, SCREEN_WIDTH - PADDING_X, y, LINE_COLOR)
    }
    for i in 0..PLAYFIELD_COLS {
        x := PADDING_X + i*CELL_SIZE
        draw_line(x, PADDING_Y + HEADER_HEIGHT, x, SCREEN_HEIGHT - PADDING_Y, LINE_COLOR)
    }
    for i in 0..<PLAYFIELD_ROWS {
        for j in 0..<PLAYFIELD_COLS {
            if playfield[i][j] != Cell_State.Empty {
                render_cell(j, i, tetramino_colors[playfield[i][j] as int - 1])
            }
        }
    }
}

get_coords :: (instance: *Tetramino_Instance) -> [8]u8 {
    $assert(instance != 0 as *Tetramino_Instance)
    coords: [8]u8

    i := 0
    for y in 0..<4 {
        row: u32 = instance.*.tetramino.rotations[instance.*.rotation] >> y as u32 * 4
        for x in 0..<4 {
            if row&0x1 != 0 {
                _x := instance.*.x + x
                _y := instance.*.y - y
                coords[i] = _x as u8
                coords[i + 1] = _y as u8
                i += 2
            }
            # row >>= 1
            row = row >> 1
        }
    }

    $assert(i == 8)
    coords
}

can_render_tetromino_instance :: (instance: *Tetramino_Instance) -> bool {
    render_coords := get_coords(instance)
    can_render := true
    i := 0
    while i < 8 {
        x := render_coords[i]
        y := render_coords[i + 1]
        if {
            { x < 0 or x >= PLAYFIELD_COLS } or
            { y < 0 or y >= PLAYFIELD_ROWS } or
            playfield[y][x] != Cell_State.Empty
        } {
            can_render = false
            break
        }
        i += 2
    }
    can_render
}

resolve_clears :: (game: *Game) {
    clear_count := 0
    for i in 0 ..< PLAYFIELD_ROWS {
        row_is_full := true
        for j in 0 ..< PLAYFIELD_COLS {
            if playfield[i][j] == Cell_State.Empty {
                row_is_full = false
                break
            }
        }
        if row_is_full {
            for j in 0 ..< PLAYFIELD_COLS {
                playfield[i][j] = Cell_State.Empty
            }
            for k in i+1 ..< PLAYFIELD_ROWS {
                for j in 0 ..< PLAYFIELD_COLS {
                    playfield[k - 1][j] = playfield[k][j]
                }
            }
            i -= 1
            clear_count += 1
        }
    }
    points: [4]u16 = [100, 300, 500, 800]
    if clear_count > 0 {
        game.*.score += points[clear_count - 1]
    }
}

lock_tetramino_instance :: (instance: *Tetramino_Instance, game: *Game) {
    if can_render_tetromino_instance(instance) {
        render_coords := get_coords(instance)
        i := 0
        while i < 8 {
            x := render_coords[i]
            y := render_coords[i + 1]
            playfield[y][x] = { instance.*.tetramino.index + 1 } as Cell_State
            i += 2
        }
        resolve_clears(game)
        next_tetramino(game.*.current_tetramino, &game.*.shuffler)
    }
}

handle_input :: (game: *Game) -> Action {
    action := Action.None
    if timer_has_elapsed(&game.*.auto_drop_timer) {
        action = Action.Auto_Drop
    } else if is_key_pressed(KEY_SPACE) {
        action = Action.Hard_Drop
    } else if is_key_pressed(KEY_S) or is_key_pressed(KEY_DOWN) {
        action = Action.Drop
    } else if is_key_pressed(KEY_W) or is_key_pressed(KEY_UP) {
        action = Action.Rotate
    } else if is_key_pressed(KEY_A) or is_key_pressed(KEY_LEFT) {
        action = Action.Left
    } else if is_key_pressed(KEY_D) or is_key_pressed(KEY_RIGHT) {
        action = Action.Right
    } else if game.*.state == Game_State.Paused and is_key_pressed(KEY_R) {
        action = Action.Restart
    }
    action
}

handle_action :: (action: Action, game: *Game) {
    if game.*.state == Game_State.Paused {
        if action == Action.Restart {
            game.* = init_game()
            game.*.state = Game_State.Playing
        }
    } else {
        current_coords := get_coords(game.*.current_tetramino)
        request := game.*.current_tetramino.*

        if action == Action.Rotate {
            request.rotation = { request.rotation + 1 } % 4
        } else if action == Action.Left {
            request.x -= 1
        } else if action == Action.Right {
            request.x += 1
        } else if action == Action.Auto_Drop {
            request.y -= 1
        } else if action == Action.Hard_Drop {
            while can_render_tetromino_instance(&request) {
                request.y -= 1
            }
            request.y += 1
        } else if action == Action.Drop {
            request.y -= 2
        }

        i := 0
        while i < 8 {
            x := current_coords[i]
            y := current_coords[i + 1]
            playfield[y][x] = Cell_State.Empty
            i += 2
        }

        can_render := can_render_tetromino_instance(&request)

        if can_render {
            game.*.current_tetramino.*.x = request.x
            game.*.current_tetramino.*.y = request.y
            game.*.current_tetramino.*.rotation = request.rotation
        }

        if action == Action.Hard_Drop or
         { action == Action.Auto_Drop and !can_render } {
            lock_tetramino_instance(game.*.current_tetramino, game)
        }
    }
}

render_tetromino_instance :: (instance: *Tetramino_Instance) -> bool {
    if can_render_tetromino_instance(instance) {
        i := 0
        while i < 8 {
            render_coords := get_coords(instance)
            x := render_coords[i]
            y := render_coords[i + 1]
            render_cell(x, y, instance.*.tetramino.color)
            i += 2
        }
        true
    } else {
        false
    }
}

render_ghost_tetromino_instance :: (instance: *Tetramino_Instance) {
    if can_render_tetromino_instance(instance) {
        ghost := instance.*
        ghost.tetramino.color.a = 120
        while can_render_tetromino_instance(&ghost) {
            ghost.y -= 1
        }
        ghost.y += 1
        render_tetromino_instance(&ghost)
        ;
    }
}

draw_game_over :: () {
    text_width := measure_text("Game Over", 48)
    x := { SCREEN_WIDTH - text_width } / 2
    y := SCREEN_HEIGHT / 2
    draw_text("Game Over", x, y - 110, 48, GRAY)
    draw_text("Press R to restart", x, y - 50, 24, GRAY)
    ;
}

check_game_over :: (game: *Game) {
    for i in 0..<PLAYFIELD_COLS {
        if playfield[PLAYFIELD_ROWS - 1][i] != Cell_State.Empty {
            draw_game_over()
            game.*.state = Game_State.Paused
        }
    }
}

main :: () {
    init_window(SCREEN_WIDTH, SCREEN_HEIGHT, "Tetris")
    set_target_fps(60)

    bg_color := Color(r = 240, g = 240, b = 240, a = 255)
    game := init_game()
    game.state = Game_State.Playing

    while !window_should_close() {
        begin_drawing()
        clear_background(bg_color)

        # Game related stuff
        render_score(game.score)
        render_grid()
        handle_action(handle_input(&game), &game)
        check_game_over(&game)
        render_tetromino_instance(game.current_tetramino)
        render_ghost_tetromino_instance(game.current_tetramino)

        end_drawing()
    }

    close_window()
    deinit_game(&game)
}
